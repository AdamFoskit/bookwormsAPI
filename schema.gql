# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AvailableShiftDto {
  _id: String!
  title: String!
  start: String!
  end: String!
  color: String!
  value: String
  available: Boolean!
  full_user: UserDto!
}

type BlackoutDto {
  _id: String!
  start: String!
  end: String!
}

type ClockDto {
  _id: String!
  time: String!
  location: String!
}

input CreateBlackoutInput {
  start: String!
  end: String!
}

input CreateUserInput {
  firebaseID: String!
  email: String!
  firstName: String!
  lastName: String!
  userType: String!
  color: String
}

type EventDto {
  _id: String!
  title: String!
  start: String!
  end: String!
  color: String!
  value: String
  available: Boolean!
}

input EventWithoutIDInput {
  title: String!
  start: String!
  end: String!
  color: String!
  value: String
  available: Boolean = false
}

type Mutation {
  """
  Use to create one Blackout. Date must be passed as a string. Must use date.toISOString() if updating start/end.
  """
  createBlackout(start: String!, end: String!): BlackoutDto

  """
  Use to update any part of one Blackout. Date must be passed as a string. Must
  use date.toISOString() if updating start/end.
  """
  updateBlackout(_id: String!, start: String, end: String): BlackoutDto

  """Use to delete a blackout date. This cannot be reversed"""
  deleteBlackout(id: String!): Boolean
  addPendingShift(toUserID: String!, fromUserID: String!, shiftID: String!): String!
  declinePendingShift(shiftID: String!): Boolean!
  acceptPendingShift(shiftID: String!): Boolean!

  """
  Use to create one User. Date must be passed as a string. Must use date.toISOString() if updating start/end.
  """
  createUser(firebaseID: String!, email: String!, firstName: String!, lastName: String!, userType: String!, color: String): UserDto

  """
  Use to update any part of one User. Date must be passed as a string. Must use date.toISOString() if updating start/end.
  """
  updateUser(_id: String!, email: String, firstName: String, lastName: String, userType: String, color: String, shifts: [UpdateEventInput!], preferences: [UpdateEventInput!]): UserDto

  """Use to update many users' shifts."""
  updateUsersShifts(users: [UpdateUserShift!]!): [UserDto!]

  """Use to add a shift to the trade board."""
  addTradeBoardShift(shiftID: String!, userID: String!): AvailableShiftDto

  """Use to remove a shift from the trade board."""
  removeTradeBoardShift(shiftID: String!, userID: String!): Boolean!

  """Use to clock in."""
  clockIn(location: String!, time: String!, userID: String!): Boolean!

  """Use to clock out."""
  clockOut(location: String!, time: String!, userID: String!): Boolean!

  """Use to delete a user. Not reversible.."""
  deleteUser(id: String!): Boolean!
}

type PendingShiftDto {
  _id: String!
  title: String!
  start: String!
  end: String!
  color: String!
  value: String
  available: Boolean!
  fromUserID: String!
  full_fromUser: UserDto
  toUserID: UserDto!
  full_toUser: UserDto
}

type Query {
  """Get all Blackouts."""
  getBlackouts: [BlackoutDto!]!

  """
  Get one Blackout. If no Blackout can be found with the supplied ID, this will return null.
  """
  getBlackoutByID(id: String!): BlackoutDto
  getPendingShifts: [PendingShiftDto!]!

  """Get all Users."""
  getUsers: [UserDto!]!

  """
  Get one User. If no User can be found with the supplied ID, this will return null.
  """
  getUserByID(id: String!): UserDto

  """
  Get one User. If no User can be found with the supplied FirebaseID, this will return null.
  """
  getUserByFirebaseID(firebaseID: String!): UserDto

  """
  Get one User. If no User can be found with the supplied FirebaseID, this will return null.
  """
  getTradeBoardShifts: [AvailableShiftDto!]
}

input UpdateBlackoutDtoInput {
  _id: String!
  start: String
  end: String
}

input UpdateEventInput {
  _id: String!
  title: String!
  start: String!
  end: String!
  color: String!
  value: String
  available: Boolean = false
}

input UpdateUserInput {
  _id: String!
  email: String
  firstName: String
  lastName: String
  userType: String
  color: String
  shifts: [UpdateEventInput!]
  preferences: [UpdateEventInput!]
}

input UpdateUserShift {
  _id: String!
  shifts: [EventWithoutIDInput!]
}

input UpdateUserShiftsDto {
  users: [UpdateUserShift!]!
}

type UserDto {
  _id: String!
  firebaseID: String!
  email: String!
  firstName: String!
  lastName: String!
  userType: String!
  color: String
  shifts: [EventDto!]!
  preferences: [EventDto!]!
  clockIns: [ClockDto!]
  clockOuts: [ClockDto!]
}
